#pragma once

#include "Vector3.h"
#include <cstdio>
#ifdef CREATING_DLL
#define DLL_2  __declspec(dllexport)
#else
#define  DLL_2 __declspec(dllimport)
#endif

#define Header_Size 80



class __declspec(dllexport) C3DModel_STL
{

public:

	FILE * _objFileName;

	CVector3 *m_vertices;                               // Dynamically-allocated array of vertices
	CVector3 *m_normals;                               // Dynamically-allocated array of normals
	CVector3 *m_UVCoords;                             // Dynamically-allocated array of UV coords

	//char headerArr[Header_Size];
	short int headerArr[Header_Size];

	C3DModel_STL();
	~C3DModel_STL();

	bool readFile(const char * const filename); //*** should be private

	void reset();
	bool loadFromFile(const char * const filename);

	int m_numVertices, m_numNormals, m_numUVCoords, m_numFaces;
	unsigned int m_shaderProgramId;                                   // Shader program identifier generated by OpenGL
	unsigned int m_graphicsMemoryObjectId;                            // Vertex Array Object identifier generated by OpenGL
	unsigned int m_textureObjectId;									  // Texture object identifier generated by OpenGL

	unsigned short *m_vertexIndices;                                  // Dynamically-allocated array of vertex indices for this model
	unsigned short *m_normalIndices;                                  // Dynamically-allocated array of normal indices for this model
	unsigned short *m_UVindices;                                      // Dynamically-allocated array of UV coord indices for this model

	float *m_verticesRaw;                                             // Dynamically-allocated array of vertices (raw float values)
	float *m_normalsRaw;                                              // Dynamically-allocated array of normals (raw float values)
	float *m_uvCoordsRaw;                                             // Dynamically-allocated array of UV coords (raw float values)
	bool m_Initialized;

};
