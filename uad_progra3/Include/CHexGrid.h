#pragma once
#include <iostream>
#include "CVector3.h"
#include <vector>
#include "CHexCell.h"
#include "COpenGLRenderer.h"
#include "CWideStringHelper.h"
#include "Globals.h"
using namespace std;
#define GRID_SIZE 1

class CHexGrid
{
public:

	
	CHexGrid();
	~CHexGrid();
	void buildGrid(float cellsize); //cellsize - s
	bool initialize(COpenGLRenderer* render);

	unsigned int* getWireframeID();
	unsigned int* getArrayID();

	unsigned int* getWireframeIDtex();
	unsigned int* getArrayIDtex();

private:

	float * Vertex;
	float* VertexTexturas;
	int First_CenterX, First_CenterY;

	CHexCell * m_pCeldas[GRID_SIZE][GRID_SIZE];
	CHexCell * m_pCeldasTex[GRID_SIZE][GRID_SIZE];

	unsigned short vindex[4 * 3 * GRID_SIZE*GRID_SIZE];
	unsigned short vindexTex[4 * 3 * GRID_SIZE*GRID_SIZE];

	unsigned int WireframeID;

	unsigned int ArrayID;
	
	unsigned int m_ShaderProgramId;									// Shader program identifier generated by OpenGL
	unsigned int m_graphicsMemoryId;							    // Vertex Array Object identifier generated by OpenGL
	unsigned int m_textureId;										// Texture object identifier generated by OpenGL

	unsigned short *m_vertexIndices;									// Dynamically-allocated array of vertex indices for this model
	unsigned short *m_normalIndies;								    // Dynamically-allocated array of normal indices for this model
	unsigned short *m_UVindices;                                    // Dynamically-allocated array of UV coord indices for this model

	float *m_verticesRaw;                                             // Dynamically-allocated array of vertices (raw float values)
	float *m_normalsRaw;                                              // Dynamically-allocated array of normals (raw float values)
	float *m_uvCoordsRaw;											  // Dynamically-allocated array of UV coords (raw float values)

	int m_numVertices, m_numNormals, m_numUVCoords, m_numFaces;


	void reset();
};